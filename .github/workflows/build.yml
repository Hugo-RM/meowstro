name: Multi-Platform Build and Test

on:
  push:
    branches:
      - '**'
  pull_request:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '5300a2a461a53b76405db4fcbe6aeb0eea43935d'

      - name: Cache vcpkg packages
        uses: actions/cache@v4
        with:
          path: |
            build/vcpkg_installed
            ${{ env.VCPKG_ROOT }}/installed
            ${{ env.VCPKG_ROOT }}/packages
            ${{ env.VCPKG_ROOT }}/buildtrees
            ${{ env.VCPKG_ROOT }}/downloads
          key: vcpkg-windows-${{ hashFiles('vcpkg.json') }}-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            vcpkg-windows-${{ hashFiles('vcpkg.json') }}-
            vcpkg-windows-

      - name: Prepare build.ps1 from build.default.ps1
        shell: pwsh
        run: |
          Copy-Item build.default.ps1 build.ps1
          (Get-Content build.ps1) -replace '^\$VCPKG_PATH\s*=.*', '$VCPKG_PATH = "${{ env.VCPKG_ROOT }}"' | Set-Content build.ps1

      - name: Build Project (PowerShell)
        shell: pwsh
        run: ./build.ps1

      - name: Run Game Executable Test
        working-directory: build/bin/Debug
        run: |
          # Keep --test flag for now to avoid audio issues in CI
          ./meowstro.exe --test

      - name: Run cppcheck (static analysis)
        run: |
          if (!(Get-Command cppcheck -ErrorAction SilentlyContinue)) {
            choco install cppcheck -y
          }
          $cppcheck = if (Get-Command cppcheck -ErrorAction SilentlyContinue) { "cppcheck" } else { "C:\Program Files\Cppcheck\cppcheck.exe" }
          & $cppcheck --enable=all --inconclusive --std=c++17 --quiet `
            -I include `
            -I "${{ env.VCPKG_ROOT }}/installed/x64-windows/include" `
            src

      - name: Run clang-tidy (static analysis)
        run: |
          if (!(Get-Command clang-tidy -ErrorAction SilentlyContinue)) {
            choco install llvm -y
          }
          if (Test-Path "build/compile_commands.json") {
            clang-tidy -p build $(Get-ChildItem -Path src -Filter *.cpp | ForEach-Object { $_.FullName })
          } else {
            Write-Host "No compilation database found, skipping clang-tidy"
          }

      - name: Run Unit Tests
        run: |
          cd build
          ctest --output-on-failure -C Debug

      - name: Upload Executable Artifact (main branch only)
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: meowstro-windows
          path: build/bin/Debug/

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install SDL2 system packages and build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            pkg-config \
            libsdl2-dev \
            libsdl2-image-dev \
            libsdl2-mixer-dev \
            libsdl2-ttf-dev \
            cppcheck \
            clang-tidy

      - name: Configure CMake (using system packages, NOT vcpkg)
        run: |
          # Explicitly avoid vcpkg by not setting CMAKE_TOOLCHAIN_FILE
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Build Project
        run: cmake --build build --parallel $(nproc)

      - name: Run Game Executable Test
        run: |
          # Keep --test flag for now to avoid audio issues in CI
          # Find the executable location (Linux builds to build/bin, not build/bin/Debug)
          if [ -f "build/bin/Debug/meowstro" ]; then
            build/bin/Debug/meowstro --test
          elif [ -f "build/bin/meowstro" ]; then
            build/bin/meowstro --test
          else
            echo "Main executable not found, checking build directory..."
            find build -name "meowstro" -type f
            exit 1
          fi

      - name: Run cppcheck (static analysis)
        run: |
          cppcheck --enable=all --inconclusive --std=c++17 --quiet \
            -I include \
            src

      - name: Run clang-tidy (static analysis)
        run: |
          if [ -f "build/compile_commands.json" ]; then
            find src -name '*.cpp' -exec clang-tidy -p build {} \;
          else
            echo "No compilation database found, skipping clang-tidy"
          fi

      - name: Run Unit Tests
        run: |
          cd build
          ctest --output-on-failure

      - name: Upload Executable Artifact (main branch only)
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: meowstro-linux
          path: |
            build/bin/
            !build/bin/**/*.o
            !build/bin/**/*.a

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install SDL2 via Homebrew
        run: |
          brew install \
            sdl2 \
            sdl2_image \
            sdl2_mixer \
            sdl2_ttf \
            cppcheck \
            llvm

      - name: Configure CMake (Homebrew packages)
        run: |
          HOMEBREW_PREFIX=$(brew --prefix)
          cmake -B build -S . \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DCMAKE_PREFIX_PATH="$HOMEBREW_PREFIX"

      - name: Build Project
        run: cmake --build build --parallel $(sysctl -n hw.logicalcpu)

      - name: Run Game Executable Test  
        run: |
          # Keep --test flag for now to avoid audio issues in CI
          # Find the executable location for macOS
          if [ -f "build/bin/Debug/meowstro" ]; then
            build/bin/Debug/meowstro --test
          elif [ -f "build/bin/meowstro" ]; then
            build/bin/meowstro --test
          else
            echo "Main executable not found, checking build directory..."
            find build -name "meowstro" -type f
            exit 1
          fi

      - name: Run cppcheck (static analysis)
        run: |
          cppcheck --enable=all --inconclusive --std=c++17 --quiet \
            -I include \
            src

      - name: Run clang-tidy (static analysis)
        run: |
          if [ -f "build/compile_commands.json" ]; then
            $(brew --prefix llvm)/bin/clang-tidy -p build $(find src -name '*.cpp')
          else
            echo "No compilation database found, skipping clang-tidy"
          fi

      - name: Run Unit Tests
        run: |
          cd build
          ctest --output-on-failure

      - name: Upload Executable Artifact (main branch only)
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: meowstro-macos
          path: build/bin/Debug/